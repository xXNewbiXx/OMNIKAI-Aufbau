---
name: ci
'on':
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  codex:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (mit Token für Submodule)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          # funktioniert auch, wenn das Secret leer ist – dann nutzt checkout GITHUB_TOKEN
          token: ${{ secrets.GH_PAT_SUBMODULES }}
          persist-credentials: false

      - name: Token wählen (GH_PAT > GITHUB_TOKEN)
        id: tok
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if [ -n "$GH_PAT" ]; then
            echo "token=$GH_PAT" >> $GITHUB_OUTPUT
            echo "kind=GH_PAT"   >> $GITHUB_OUTPUT
          else
            echo "token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT
            echo "kind=GITHUB_TOKEN"    >> $GITHUB_OUTPUT
          fi
          echo "🔑 Verwende: $(sed -n 's/^kind=//p' $GITHUB_OUTPUT)"

      - name: Git-Identität & Remote setzen
        env:
          TOKEN: ${{ steps.tok.outputs.token }}
          REPO: ${{ github.repository }}
        run: |
          git config --global user.name  "${GH_BOT_NAME:-codex-bot}"
          git config --global user.email "${GH_BOT_EMAIL:-codex-bot@users.noreply.github.com}"
          git remote set-url origin "https://x-access-token:${TOKEN}@github.com/${REPO}.git"
          git remote -v

      # Kein if: secrets …  -> stattdessen im Skript skippen, wenn Token leer ist
      - name: Submodule via HTTPS (skip wenn kein Token)
        env:
          GH_PAT_SUBMODULES: ${{ secrets.GH_PAT_SUBMODULES }}
        run: |
          if [ -n "$GH_PAT_SUBMODULES" ]; then
            git config --global url."https://x-access-token:${GH_PAT_SUBMODULES}@github.com/".insteadOf "https://github.com/"
            git submodule sync --recursive
            git submodule update --init --recursive --remote || true
          else
            echo "ℹ️  kein GH_PAT_SUBMODULES gesetzt – Submodule-Rewrite übersprungen"
          fi

      - name: Heartbeat / Maintenance
        run: |
          mkdir -p logs
          echo "heartbeat $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> logs/ci_heartbeat.txt

      - name: Validate n8n flows (optional)
        run: |
          if [ -x scripts/sanity/clean-json.sh ] && [ -x scripts/sanity/check-json.sh ] && [ -d flows/n8n ]; then
            scripts/sanity/clean-json.sh flows/n8n
            scripts/sanity/check-json.sh  flows/n8n
          else
            echo "ℹ️  n8n-Validation übersprungen"
          fi

      - name: Tests (optional)
        run: |
          if [ -d tests ]; then
            python -m pip install --upgrade pip >/dev/null 2>&1 || true
            if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pytest; fi
            pytest -q
          else
            echo "ℹ️  keine Tests gefunden"
          fi

      - name: Commit & Push in neuen Branch (schont main)
        id: pushtry
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          set -e
          git add -A
          git commit -m "chore(ci): heartbeat $RUN_ID [skip ci]" || echo "nix zu committen"
          BR="codex/ci-heartbeat-$RUN_ID"
          git checkout -B "$BR"
          set +e
          git push -u origin "$BR"
          rc=$?; set -e
          if [ $rc -ne 0 ]; then
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "ok=true"  >> $GITHUB_OUTPUT
            echo "branch=$BR" >> $GITHUB_OUTPUT
          fi

      - name: PR zu main öffnen (optional)
        if: steps.pushtry.outputs.ok == 'true'
        env:
          TOKEN: ${{ steps.tok.outputs.token }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ steps.pushtry.outputs.branch }}
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls" \
            -d "$(jq -n --arg t "ci: heartbeat ${GITHUB_RUN_ID}" \
                        --arg h "${BRANCH}" \
                        --arg b "main" \
                        --arg body "Automatischer CI-Heartbeat." \
                        '{title:$t, head:$h, base:$b, body:$body}')"

      - name: Issue bei Fehler anlegen
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI failure on ${context.ref}`,
              body: `Workflow failed: ${runUrl}`,
              labels: ['ci-failure']
            });
