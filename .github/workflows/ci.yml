---
name: ci
'on':
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sanity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

        - name: Install tools (jq)
          run: |
            sudo apt-get update
            sudo apt-get install -y jq

        - name: Sanity Check – Ordnerstruktur
          run: |
            echo "✅ CI läuft"
            test -d docs || (echo "❌ docs/ fehlt" && exit 1)
            test -d prompts || echo "⚠️ prompts/ fehlt"
            test -d flows || echo "⚠️ flows/ fehlt"

        - name: Validate README format
          run: |
            grep -q "^# " README.md || (echo "❌ README hat keinen Titel" && exit 1)
            echo "✅ README hat Titel"

        - name: Validate JSON files in flows/
          run: |
            shopt -s nullglob
            for f in $(find flows -type f -name "*.json"); do
              echo "Prüfe $f ..."
              jq empty "$f" || exit 1
            done
            echo "✅ Alle JSON-Dateien gültig"

        - name: Check Markdown files are non-empty
          run: |
            while IFS= read -r -d '' file; do
              head -n 1 "$file" >/dev/null || (echo "❌ $file ist leer" && exit 1)
            done < <(find . -name "*.md" -print0)
            echo "✅ Markdown-Dateien OK"

        - name: Install profit calc deps
          run: python -m pip install --upgrade pip pandas numpy jinja2

        - name: Run profit calc
          run: |
            python tools/profit_calc.py \
              --config profit/config.yaml \
              --params profit/unit_economics.yaml \
              --metrics data/metrics.csv \
              --threshold tools/opindex_threshold.json \
              --template dashboards/weekly_profit_report.md.gtpl \
              --out /tmp/weekly_profit_report.md \
              --json /tmp/weekly_profit_report.json

    validate_sources:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            submodules: recursive
            fetch-depth: 0

        - name: Ensure sources & schema exist
          run: |
            test -f datasources/sources.yaml || (echo "❌ datasources/sources.yaml fehlt" && exit 1)
            test -f schemas/sources.schema.json || (echo "❌ schemas/sources.schema.json fehlt" && exit 1)
            echo "✅ sources.yaml & Schema gefunden"

        - name: Convert YAML to JSON
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyyaml
          python - <<'PY'
          import json, yaml, sys
          with open('datasources/sources.yaml','r', encoding='utf-8') as f:
              data = yaml.safe_load(f) or {}
          with open('/tmp/sources.json','w', encoding='utf-8') as f:
              json.dump(data, f, ensure_ascii=False)
          print("OK: /tmp/sources.json geschrieben", file=sys.stderr)
          PY

      - name: Install ajv
        run: npm i -g ajv-cli@5

      - name: Validate schema with ajv
        run: ajv validate -s schemas/sources.schema.json -d /tmp/sources.json --spec=draft7

        - name: Check listed files exist
          run: |
            python - <<'PY'
            import os, json, sys
            data = json.load(open('/tmp/sources.json','r', encoding='utf-8'))
            missing = []
            for s in data.get('sources', []):
              p = (s or {}).get('path','')
              fp = p.split('#', 1)[0]
              if fp and not os.path.exists(fp):
                missing.append(fp)
            if missing:
              print("❌ Fehlende Dateien:")
              for m in missing: print(" -", m)
              sys.exit(1)
            print("✅ Alle referenzierten Dateien vorhanden.")
            PY

  notify:
    needs: [sanity, validate_sources]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI failure - ${process.env.GITHUB_RUN_ID}`,
              labels: ['ci-failure'],
              body: `CI run failed: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`
            })
