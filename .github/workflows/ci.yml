name: ci
on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write   # damit der Workflow ins Repo pushen darf

jobs:
  codex:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (mit GitHub-Token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false   # wir setzen gleich eine eigene Remote mit Token

      - name: Git-Identit√§t + Remote (per GITHUB_TOKEN)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}"

      # --- optional/warn-only: Submodules aktualisieren, ohne den Build zu brechen
      - name: Update submodules (warn-only)
        run: |
          set +e
          if [ -x ./scripts/update_submodules.sh ]; then
            ./scripts/update_submodules.sh || echo "‚ö† submodule update warnte"
          else
            GIT_TERMINAL_PROMPT=0 git submodule update --init --recursive || echo "‚ö† submodule update warnte"
          fi

      - name: Codex Auto-Cleanup (Demo: Heartbeat anlegen/anh√§ngen)
        run: |
          mkdir -p logs
          echo "heartbeat $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> logs/ci_heartbeat.txt
          # üëâ HIER kannst du sp√§ter echte Aufr√§um-Aktionen reinschieben
          # z.B.: find . -name "*.tmp" -delete

      # --- optional: n8n-Flow-Validierung (nur wenn Skript/Ordner existieren)
      - name: Validate n8n flow schemas (optional)
        run: |
          if [ -x scripts/sanity/check-json.sh ] && [ -d flows/n8n ]; then
            scripts/sanity/check-json.sh flows/n8n || exit 1
          else
            echo "‚ÑπÔ∏è keine n8n-Validierung (Skript/Ordner fehlt)"
          fi

      # --- optional: Tests (nur wenn tests/ existiert)
      - name: Run tests (optional)
        run: |
          if [ -d tests ]; then
            python -m pip install --upgrade pip >/dev/null 2>&1 || true
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              pip install pytest
            fi
            pytest tests -q
          else
            echo "‚ÑπÔ∏è keine Tests gefunden"
          fi

      - name: Commit & Push
        run: |
          set -e
          git add -A
          git commit -m "codex: auto-maintenance heartbeat [skip ci]" || echo "nix zu committen"
          # zur√ºck in denselben Branch pushen
          git push origin "HEAD:${GITHUB_REF#refs/heads/}"

      # --- optional: Issue anlegen, falls Job rot ist
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI failure on ${context.ref}`,
              body: `Workflow failed: ${runUrl}`,
              labels: ['ci-failure']
            });
