---
name: ci
'on':
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write   # damit der Workflow ins Repo pushen darf

jobs:
  codex:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (mit GitHub-Token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false   # wir setzen gleich eine eigene Remote mit Token

      - name: Git-IdentitÃ¤t + Remote (per GITHUB_TOKEN)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}"

      - name: Update submodules
        run: |
          ./scripts/update_submodules.sh || echo "warn: submodules not updated"

      - name: Codex Auto-Cleanup (Demo: Heartbeat anlegen/anhÃ¤ngen)
        run: |
          mkdir -p logs
          echo "heartbeat $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> logs/ci_heartbeat.txt
          # ðŸ‘‰ HIER kannst du spÃ¤ter echte AufrÃ¤um-Aktionen reinschieben
          # z.B.: find . -name "*.tmp" -delete

      - name: Validate n8n flow schemas
        run: |
          scripts/sanity/check-json.sh flows/n8n

      - name: Run tests
        run: |
          if [ -d tests ]; then
            pytest tests -q
          else
            echo "no tests"
          fi

      - name: Commit & Push
        run: |
          set -e
          git add -A
          git commit -m "codex: auto-maintenance heartbeat [skip ci]" || echo "nix zu committen"
          # zurÃ¼ck in denselben Branch pushen
          git push origin "HEAD:${GITHUB_REF#refs/heads/}"

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI failure on ${context.ref}`,
              body: `Workflow failed: ${runUrl}`,
              labels: ['ci-failure']
            });
