---
name: ci
'on':
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  codex:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout: OHNE Submodule (Problemquelle entfernt)
      - name: Checkout (ohne Submodule)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false
          persist-credentials: false

      # --- Token bestimmen (PAT bevorzugt, sonst GITHUB_TOKEN)
      - name: Token wählen (GH_PAT > GITHUB_TOKEN)
        id: tok
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if [ -n "$GH_PAT" ]; then
            echo "token=$GH_PAT" >> $GITHUB_OUTPUT
            echo "kind=GH_PAT"   >> $GITHUB_OUTPUT
          else
            echo "token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT
            echo "kind=GITHUB_TOKEN"    >> $GITHUB_OUTPUT
          fi
          echo "🔑 Verwende: $(sed -n 's/^kind=//p' $GITHUB_OUTPUT)"

      # --- Git-Identität & Remote
      - name: Git-Identität & Remote setzen
        env:
          TOKEN: ${{ steps.tok.outputs.token }}
          REPO: ${{ github.repository }}
        run: |
          git config --global user.name  "${GH_BOT_NAME:-codex-bot}"
          git config --global user.email "${GH_BOT_EMAIL:-codex-bot@users.noreply.github.com}"
          git remote set-url origin "https://x-access-token:${TOKEN}@github.com/${REPO}.git"
          git remote -v

      # --- Submodules "best effort" (skip/warn)
      - name: Submodules aktualisieren (warn-only)
        env:
          GH_PAT_SUBMODULES: ${{ secrets.GH_PAT_SUBMODULES }}
        run: |
          set +e
          if [ -n "$GH_PAT_SUBMODULES" ]; then
            git config --global url."https://x-access-token:${GH_PAT_SUBMODULES}@github.com/".insteadOf "https://github.com/"
          fi
          git submodule sync --recursive || echo "⚠ submodule sync warnte"
          if [ -f .gitmodules ]; then
            while read -r path; do
              [ -n "$path" ] || continue
              echo "➡ update submodule: $path"
              GIT_TERMINAL_PROMPT=0 git submodule update --init "$path" || echo "⚠ update warnte: $path"
            done < <(git config -f .gitmodules --get-regexp 'submodule\..*\.path' | awk '{print $2}')
          else
            echo "ℹ️ keine .gitmodules gefunden – übersprungen"
          fi
          set -e

      # --- Heartbeat / Maintenance
      - name: Heartbeat / Maintenance
        run: |
          mkdir -p logs
          echo "heartbeat $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> logs/ci_heartbeat.txt

      # --- n8n-Validation (WARN-ONLY)
      - name: Validate n8n flows (warn-only)
        continue-on-error: true
        run: |
          if [ -x scripts/sanity/clean-json.sh ] && [ -x scripts/sanity/check-json.sh ] && [ -d flows/n8n ]; then
            set +e
            scripts/sanity/clean-json.sh flows/n8n    || echo "⚠ clean-json warnte"
            scripts/sanity/check-json.sh  flows/n8n   || echo "⚠ check-json warnte"
            set -e
          else
            echo "ℹ️ n8n-Validation übersprungen (Skript/Ordner fehlt)"
          fi

      # --- Python + Dependencies installieren
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # Basis-Tests + fehlende Libs installieren
            pip install pytest pandas numpy aiosqlite astropy
            # Lokales Modul (swarm_benchmark) installieren
            if [ -d external/claude-flow/benchmark ]; then
              pip install -e external/claude-flow/benchmark || echo "⚠ swarm_benchmark Installation warnte"
            fi
          fi

      # --- Tests (optional, darf failen)
      - name: Run tests (warn-only)
        continue-on-error: true
        run: |
          if [ -d tests ]; then
            pytest -q || echo "⚠ Tests schlugen fehl"
          else
            echo "ℹ️ keine Tests gefunden"
          fi

      # --- Commit & Push in neuen Branch
      - name: Commit & Push in neuen Branch
        id: pushtry
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          set -e
          git add -A
          git commit -m "chore(ci): heartbeat $RUN_ID [skip ci]" || echo "nix zu committen"
          BR="codex/ci-heartbeat-$RUN_ID"
          git checkout -B "$BR"
          set +e
          git push -u origin "$BR"
          rc=$?; set -e
          if [ $rc -ne 0 ]; then
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "ok=true"   >> $GITHUB_OUTPUT
            echo "branch=$BR" >> $GITHUB_OUTPUT
          fi

      # --- Optionale PR zu main
      - name: PR zu main öffnen (optional)
        if: steps.pushtry.outputs.ok == 'true'
        env:
          TOKEN: ${{ steps.tok.outputs.token }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ steps.pushtry.outputs.branch }}
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls" \
            -d "$(jq -n --arg t "ci: heartbeat ${GITHUB_RUN_ID}" \
                        --arg h "${BRANCH}" \
                        --arg b "main" \
                        --arg body "Automatischer CI-Heartbeat." \
                        '{title:$t, head:$h, base:$b, body:$body}')"

      # --- Issue bei Fehler
      - name: Issue bei Fehler anlegen
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI failure on ${context.ref}`,
              body: `Workflow failed: ${runUrl}`,
              labels: ['ci-failure']
            });
